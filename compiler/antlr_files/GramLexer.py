# Generated from Gram.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,218,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,3,1,72,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,95,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,106,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,26,3,26,172,8,26,1,26,4,26,175,8,26,11,26,
        12,26,176,1,27,4,27,180,8,27,11,27,12,27,181,1,27,1,27,5,27,186,
        8,27,10,27,12,27,189,9,27,1,27,5,27,192,8,27,10,27,12,27,195,9,27,
        1,27,1,27,4,27,199,8,27,11,27,12,27,200,3,27,203,8,27,1,28,1,28,
        5,28,207,8,28,10,28,12,28,210,9,28,1,29,4,29,213,8,29,11,29,12,29,
        214,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,2,
        0,43,43,45,45,2,0,42,42,47,47,2,0,60,60,62,62,1,0,48,57,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,235,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,
        1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,78,1,0,0,0,9,80,1,0,0,0,11,82,
        1,0,0,0,13,94,1,0,0,0,15,105,1,0,0,0,17,107,1,0,0,0,19,110,1,0,0,
        0,21,115,1,0,0,0,23,118,1,0,0,0,25,124,1,0,0,0,27,131,1,0,0,0,29,
        133,1,0,0,0,31,135,1,0,0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,141,
        1,0,0,0,39,143,1,0,0,0,41,145,1,0,0,0,43,147,1,0,0,0,45,149,1,0,
        0,0,47,153,1,0,0,0,49,159,1,0,0,0,51,165,1,0,0,0,53,171,1,0,0,0,
        55,202,1,0,0,0,57,204,1,0,0,0,59,212,1,0,0,0,61,62,5,61,0,0,62,2,
        1,0,0,0,63,64,5,105,0,0,64,65,5,110,0,0,65,72,5,116,0,0,66,67,5,
        102,0,0,67,68,5,108,0,0,68,69,5,111,0,0,69,70,5,97,0,0,70,72,5,116,
        0,0,71,63,1,0,0,0,71,66,1,0,0,0,72,4,1,0,0,0,73,74,5,118,0,0,74,
        75,5,111,0,0,75,76,5,105,0,0,76,77,5,100,0,0,77,6,1,0,0,0,78,79,
        5,59,0,0,79,8,1,0,0,0,80,81,7,0,0,0,81,10,1,0,0,0,82,83,7,1,0,0,
        83,12,1,0,0,0,84,85,5,43,0,0,85,95,5,61,0,0,86,87,5,45,0,0,87,95,
        5,61,0,0,88,89,5,42,0,0,89,95,5,61,0,0,90,91,5,47,0,0,91,95,5,61,
        0,0,92,93,5,37,0,0,93,95,5,61,0,0,94,84,1,0,0,0,94,86,1,0,0,0,94,
        88,1,0,0,0,94,90,1,0,0,0,94,92,1,0,0,0,95,14,1,0,0,0,96,97,5,61,
        0,0,97,106,5,61,0,0,98,99,5,33,0,0,99,106,5,61,0,0,100,106,7,2,0,
        0,101,102,5,60,0,0,102,106,5,61,0,0,103,104,5,62,0,0,104,106,5,61,
        0,0,105,96,1,0,0,0,105,98,1,0,0,0,105,100,1,0,0,0,105,101,1,0,0,
        0,105,103,1,0,0,0,106,16,1,0,0,0,107,108,5,105,0,0,108,109,5,102,
        0,0,109,18,1,0,0,0,110,111,5,101,0,0,111,112,5,108,0,0,112,113,5,
        115,0,0,113,114,5,101,0,0,114,20,1,0,0,0,115,116,5,100,0,0,116,117,
        5,111,0,0,117,22,1,0,0,0,118,119,5,119,0,0,119,120,5,104,0,0,120,
        121,5,105,0,0,121,122,5,108,0,0,122,123,5,101,0,0,123,24,1,0,0,0,
        124,125,5,114,0,0,125,126,5,101,0,0,126,127,5,116,0,0,127,128,5,
        117,0,0,128,129,5,114,0,0,129,130,5,110,0,0,130,26,1,0,0,0,131,132,
        5,40,0,0,132,28,1,0,0,0,133,134,5,41,0,0,134,30,1,0,0,0,135,136,
        5,91,0,0,136,32,1,0,0,0,137,138,5,93,0,0,138,34,1,0,0,0,139,140,
        5,123,0,0,140,36,1,0,0,0,141,142,5,125,0,0,142,38,1,0,0,0,143,144,
        5,44,0,0,144,40,1,0,0,0,145,146,5,38,0,0,146,42,1,0,0,0,147,148,
        5,37,0,0,148,44,1,0,0,0,149,150,5,95,0,0,150,151,5,103,0,0,151,152,
        5,112,0,0,152,46,1,0,0,0,153,154,5,99,0,0,154,155,5,111,0,0,155,
        156,5,110,0,0,156,157,5,115,0,0,157,158,5,116,0,0,158,48,1,0,0,0,
        159,160,5,112,0,0,160,161,5,114,0,0,161,162,5,105,0,0,162,163,5,
        110,0,0,163,164,5,116,0,0,164,50,1,0,0,0,165,166,5,115,0,0,166,167,
        5,119,0,0,167,168,5,97,0,0,168,169,5,112,0,0,169,52,1,0,0,0,170,
        172,7,0,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,
        175,7,3,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,
        177,1,0,0,0,177,54,1,0,0,0,178,180,7,3,0,0,179,178,1,0,0,0,180,181,
        1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,187,
        5,46,0,0,184,186,7,3,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,
        1,0,0,0,187,188,1,0,0,0,188,203,1,0,0,0,189,187,1,0,0,0,190,192,
        7,3,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,
        1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,198,5,46,0,0,197,199,
        7,3,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,
        1,0,0,0,201,203,1,0,0,0,202,179,1,0,0,0,202,193,1,0,0,0,203,56,1,
        0,0,0,204,208,7,4,0,0,205,207,7,5,0,0,206,205,1,0,0,0,207,210,1,
        0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,58,1,0,0,0,210,208,1,0,
        0,0,211,213,7,6,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,
        0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,6,29,0,0,217,60,1,0,
        0,0,13,0,71,94,105,171,176,181,187,193,200,202,208,214,1,6,0,0
    ]

class GramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EQUAL_SIGN = 1
    TYPE = 2
    VOID = 3
    SEMICOLON = 4
    OP_ADDITIVE = 5
    OP_MULTIPLICATIVE = 6
    OP_INPLACE = 7
    OP_COMPARATIVE = 8
    IF = 9
    ELSE = 10
    DO = 11
    WHILE = 12
    RETURN = 13
    OPENPAREN = 14
    CLOSEPAREN = 15
    OPENSQUARE = 16
    CLOSESQUARE = 17
    OPENCURLY = 18
    CLOSECURLY = 19
    COMMA = 20
    ECOMMERCIAL = 21
    PERCENTAGE = 22
    GARBAGEPOINTER = 23
    CONST = 24
    PRINT_TOKEN = 25
    SWPAP_TOKEN = 26
    INT = 27
    FLOAT = 28
    ID = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'void'", "';'", "'if'", "'else'", "'do'", "'while'", 
            "'return'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", 
            "'&'", "'%'", "'_gp'", "'const'", "'print'", "'swap'" ]

    symbolicNames = [ "<INVALID>",
            "EQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", "OP_ADDITIVE", "OP_MULTIPLICATIVE", 
            "OP_INPLACE", "OP_COMPARATIVE", "IF", "ELSE", "DO", "WHILE", 
            "RETURN", "OPENPAREN", "CLOSEPAREN", "OPENSQUARE", "CLOSESQUARE", 
            "OPENCURLY", "CLOSECURLY", "COMMA", "ECOMMERCIAL", "PERCENTAGE", 
            "GARBAGEPOINTER", "CONST", "PRINT_TOKEN", "SWPAP_TOKEN", "INT", 
            "FLOAT", "ID", "WS" ]

    ruleNames = [ "EQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", "OP_ADDITIVE", 
                  "OP_MULTIPLICATIVE", "OP_INPLACE", "OP_COMPARATIVE", "IF", 
                  "ELSE", "DO", "WHILE", "RETURN", "OPENPAREN", "CLOSEPAREN", 
                  "OPENSQUARE", "CLOSESQUARE", "OPENCURLY", "CLOSECURLY", 
                  "COMMA", "ECOMMERCIAL", "PERCENTAGE", "GARBAGEPOINTER", 
                  "CONST", "PRINT_TOKEN", "SWPAP_TOKEN", "INT", "FLOAT", 
                  "ID", "WS" ]

    grammarFileName = "Gram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


