# Generated from Gram.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        69,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,92,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,23,3,23,147,8,23,1,23,4,23,150,8,
        23,11,23,12,23,151,1,24,4,24,155,8,24,11,24,12,24,156,1,24,1,24,
        5,24,161,8,24,10,24,12,24,164,9,24,1,24,5,24,167,8,24,10,24,12,24,
        170,9,24,1,24,1,24,4,24,174,8,24,11,24,12,24,175,3,24,178,8,24,1,
        25,1,25,5,25,182,8,25,10,25,12,25,185,9,25,1,26,4,26,188,8,26,11,
        26,12,26,189,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,6,2,0,43,43,
        45,45,2,0,42,42,47,47,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,9,10,12,13,32,32,206,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,1,55,1,0,0,0,3,57,1,0,0,0,5,68,1,0,0,0,7,70,1,0,0,0,9,75,1,0,0,
        0,11,77,1,0,0,0,13,79,1,0,0,0,15,91,1,0,0,0,17,93,1,0,0,0,19,96,
        1,0,0,0,21,101,1,0,0,0,23,104,1,0,0,0,25,110,1,0,0,0,27,117,1,0,
        0,0,29,119,1,0,0,0,31,121,1,0,0,0,33,123,1,0,0,0,35,125,1,0,0,0,
        37,127,1,0,0,0,39,129,1,0,0,0,41,131,1,0,0,0,43,133,1,0,0,0,45,139,
        1,0,0,0,47,146,1,0,0,0,49,177,1,0,0,0,51,179,1,0,0,0,53,187,1,0,
        0,0,55,56,5,61,0,0,56,2,1,0,0,0,57,58,5,61,0,0,58,59,5,61,0,0,59,
        4,1,0,0,0,60,61,5,105,0,0,61,62,5,110,0,0,62,69,5,116,0,0,63,64,
        5,102,0,0,64,65,5,108,0,0,65,66,5,111,0,0,66,67,5,97,0,0,67,69,5,
        116,0,0,68,60,1,0,0,0,68,63,1,0,0,0,69,6,1,0,0,0,70,71,5,118,0,0,
        71,72,5,111,0,0,72,73,5,105,0,0,73,74,5,100,0,0,74,8,1,0,0,0,75,
        76,5,59,0,0,76,10,1,0,0,0,77,78,7,0,0,0,78,12,1,0,0,0,79,80,7,1,
        0,0,80,14,1,0,0,0,81,82,5,43,0,0,82,92,5,61,0,0,83,84,5,45,0,0,84,
        92,5,61,0,0,85,86,5,42,0,0,86,92,5,61,0,0,87,88,5,47,0,0,88,92,5,
        61,0,0,89,90,5,37,0,0,90,92,5,61,0,0,91,81,1,0,0,0,91,83,1,0,0,0,
        91,85,1,0,0,0,91,87,1,0,0,0,91,89,1,0,0,0,92,16,1,0,0,0,93,94,5,
        105,0,0,94,95,5,102,0,0,95,18,1,0,0,0,96,97,5,101,0,0,97,98,5,108,
        0,0,98,99,5,115,0,0,99,100,5,101,0,0,100,20,1,0,0,0,101,102,5,100,
        0,0,102,103,5,111,0,0,103,22,1,0,0,0,104,105,5,119,0,0,105,106,5,
        104,0,0,106,107,5,105,0,0,107,108,5,108,0,0,108,109,5,101,0,0,109,
        24,1,0,0,0,110,111,5,114,0,0,111,112,5,101,0,0,112,113,5,116,0,0,
        113,114,5,117,0,0,114,115,5,114,0,0,115,116,5,110,0,0,116,26,1,0,
        0,0,117,118,5,40,0,0,118,28,1,0,0,0,119,120,5,41,0,0,120,30,1,0,
        0,0,121,122,5,91,0,0,122,32,1,0,0,0,123,124,5,93,0,0,124,34,1,0,
        0,0,125,126,5,123,0,0,126,36,1,0,0,0,127,128,5,125,0,0,128,38,1,
        0,0,0,129,130,5,44,0,0,130,40,1,0,0,0,131,132,5,38,0,0,132,42,1,
        0,0,0,133,134,5,99,0,0,134,135,5,111,0,0,135,136,5,110,0,0,136,137,
        5,115,0,0,137,138,5,116,0,0,138,44,1,0,0,0,139,140,5,112,0,0,140,
        141,5,114,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,144,5,116,
        0,0,144,46,1,0,0,0,145,147,7,0,0,0,146,145,1,0,0,0,146,147,1,0,0,
        0,147,149,1,0,0,0,148,150,7,2,0,0,149,148,1,0,0,0,150,151,1,0,0,
        0,151,149,1,0,0,0,151,152,1,0,0,0,152,48,1,0,0,0,153,155,7,2,0,0,
        154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,
        157,158,1,0,0,0,158,162,5,46,0,0,159,161,7,2,0,0,160,159,1,0,0,0,
        161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,178,1,0,0,0,
        164,162,1,0,0,0,165,167,7,2,0,0,166,165,1,0,0,0,167,170,1,0,0,0,
        168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,
        171,173,5,46,0,0,172,174,7,2,0,0,173,172,1,0,0,0,174,175,1,0,0,0,
        175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,154,1,0,0,0,
        177,168,1,0,0,0,178,50,1,0,0,0,179,183,7,3,0,0,180,182,7,4,0,0,181,
        180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,
        52,1,0,0,0,185,183,1,0,0,0,186,188,7,5,0,0,187,186,1,0,0,0,188,189,
        1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,
        6,26,0,0,192,54,1,0,0,0,12,0,68,91,146,151,156,162,168,175,177,183,
        189,1,6,0,0
    ]

class GramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EQUAL_SIGN = 1
    DEQUAL_SIGN = 2
    TYPE = 3
    VOID = 4
    SEMICOLON = 5
    OP_ADDITIVE = 6
    OP_MULTIPLICATIVE = 7
    OP_INPLACE = 8
    IF = 9
    ELSE = 10
    DO = 11
    WHILE = 12
    RETURN = 13
    OPENPAREN = 14
    CLOSEPAREN = 15
    OPENSQUARE = 16
    CLOSESQUARE = 17
    OPENCURLY = 18
    CLOSECURLY = 19
    COMMA = 20
    ECOMMERCIAL = 21
    CONST = 22
    PRINT_TOKEN = 23
    INT = 24
    FLOAT = 25
    ID = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'=='", "'void'", "';'", "'if'", "'else'", "'do'", "'while'", 
            "'return'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", 
            "'&'", "'const'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "EQUAL_SIGN", "DEQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", "OP_ADDITIVE", 
            "OP_MULTIPLICATIVE", "OP_INPLACE", "IF", "ELSE", "DO", "WHILE", 
            "RETURN", "OPENPAREN", "CLOSEPAREN", "OPENSQUARE", "CLOSESQUARE", 
            "OPENCURLY", "CLOSECURLY", "COMMA", "ECOMMERCIAL", "CONST", 
            "PRINT_TOKEN", "INT", "FLOAT", "ID", "WS" ]

    ruleNames = [ "EQUAL_SIGN", "DEQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", 
                  "OP_ADDITIVE", "OP_MULTIPLICATIVE", "OP_INPLACE", "IF", 
                  "ELSE", "DO", "WHILE", "RETURN", "OPENPAREN", "CLOSEPAREN", 
                  "OPENSQUARE", "CLOSESQUARE", "OPENCURLY", "CLOSECURLY", 
                  "COMMA", "ECOMMERCIAL", "CONST", "PRINT_TOKEN", "INT", 
                  "FLOAT", "ID", "WS" ]

    grammarFileName = "Gram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


