# Generated from Gram.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,3,1,70,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,93,8,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,3,7,104,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,3,25,165,
        8,25,1,25,4,25,168,8,25,11,25,12,25,169,1,26,4,26,173,8,26,11,26,
        12,26,174,1,26,1,26,5,26,179,8,26,10,26,12,26,182,9,26,1,26,5,26,
        185,8,26,10,26,12,26,188,9,26,1,26,1,26,4,26,192,8,26,11,26,12,26,
        193,3,26,196,8,26,1,27,1,27,5,27,200,8,27,10,27,12,27,203,9,27,1,
        28,4,28,206,8,28,11,28,12,28,207,1,28,1,28,0,0,29,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,1,0,7,2,0,43,43,45,45,2,0,42,42,47,47,2,0,60,60,62,
        62,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,12,13,32,32,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,1,59,1,0,0,0,3,69,1,0,0,0,5,71,1,0,0,0,7,76,1,0,0,0,9,78,
        1,0,0,0,11,80,1,0,0,0,13,92,1,0,0,0,15,103,1,0,0,0,17,105,1,0,0,
        0,19,108,1,0,0,0,21,113,1,0,0,0,23,116,1,0,0,0,25,122,1,0,0,0,27,
        129,1,0,0,0,29,131,1,0,0,0,31,133,1,0,0,0,33,135,1,0,0,0,35,137,
        1,0,0,0,37,139,1,0,0,0,39,141,1,0,0,0,41,143,1,0,0,0,43,145,1,0,
        0,0,45,147,1,0,0,0,47,151,1,0,0,0,49,157,1,0,0,0,51,164,1,0,0,0,
        53,195,1,0,0,0,55,197,1,0,0,0,57,205,1,0,0,0,59,60,5,61,0,0,60,2,
        1,0,0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,70,5,116,0,0,64,65,5,
        102,0,0,65,66,5,108,0,0,66,67,5,111,0,0,67,68,5,97,0,0,68,70,5,116,
        0,0,69,61,1,0,0,0,69,64,1,0,0,0,70,4,1,0,0,0,71,72,5,118,0,0,72,
        73,5,111,0,0,73,74,5,105,0,0,74,75,5,100,0,0,75,6,1,0,0,0,76,77,
        5,59,0,0,77,8,1,0,0,0,78,79,7,0,0,0,79,10,1,0,0,0,80,81,7,1,0,0,
        81,12,1,0,0,0,82,83,5,43,0,0,83,93,5,61,0,0,84,85,5,45,0,0,85,93,
        5,61,0,0,86,87,5,42,0,0,87,93,5,61,0,0,88,89,5,47,0,0,89,93,5,61,
        0,0,90,91,5,37,0,0,91,93,5,61,0,0,92,82,1,0,0,0,92,84,1,0,0,0,92,
        86,1,0,0,0,92,88,1,0,0,0,92,90,1,0,0,0,93,14,1,0,0,0,94,95,5,61,
        0,0,95,104,5,61,0,0,96,97,5,33,0,0,97,104,5,61,0,0,98,104,7,2,0,
        0,99,100,5,60,0,0,100,104,5,61,0,0,101,102,5,62,0,0,102,104,5,61,
        0,0,103,94,1,0,0,0,103,96,1,0,0,0,103,98,1,0,0,0,103,99,1,0,0,0,
        103,101,1,0,0,0,104,16,1,0,0,0,105,106,5,105,0,0,106,107,5,102,0,
        0,107,18,1,0,0,0,108,109,5,101,0,0,109,110,5,108,0,0,110,111,5,115,
        0,0,111,112,5,101,0,0,112,20,1,0,0,0,113,114,5,100,0,0,114,115,5,
        111,0,0,115,22,1,0,0,0,116,117,5,119,0,0,117,118,5,104,0,0,118,119,
        5,105,0,0,119,120,5,108,0,0,120,121,5,101,0,0,121,24,1,0,0,0,122,
        123,5,114,0,0,123,124,5,101,0,0,124,125,5,116,0,0,125,126,5,117,
        0,0,126,127,5,114,0,0,127,128,5,110,0,0,128,26,1,0,0,0,129,130,5,
        40,0,0,130,28,1,0,0,0,131,132,5,41,0,0,132,30,1,0,0,0,133,134,5,
        91,0,0,134,32,1,0,0,0,135,136,5,93,0,0,136,34,1,0,0,0,137,138,5,
        123,0,0,138,36,1,0,0,0,139,140,5,125,0,0,140,38,1,0,0,0,141,142,
        5,44,0,0,142,40,1,0,0,0,143,144,5,38,0,0,144,42,1,0,0,0,145,146,
        5,37,0,0,146,44,1,0,0,0,147,148,5,95,0,0,148,149,5,103,0,0,149,150,
        5,112,0,0,150,46,1,0,0,0,151,152,5,99,0,0,152,153,5,111,0,0,153,
        154,5,110,0,0,154,155,5,115,0,0,155,156,5,116,0,0,156,48,1,0,0,0,
        157,158,5,112,0,0,158,159,5,114,0,0,159,160,5,105,0,0,160,161,5,
        110,0,0,161,162,5,116,0,0,162,50,1,0,0,0,163,165,7,0,0,0,164,163,
        1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,168,7,3,0,0,167,166,
        1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,52,1,
        0,0,0,171,173,7,3,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,
        0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,180,5,46,0,0,177,179,7,
        3,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,
        0,0,0,181,196,1,0,0,0,182,180,1,0,0,0,183,185,7,3,0,0,184,183,1,
        0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,
        0,0,0,188,186,1,0,0,0,189,191,5,46,0,0,190,192,7,3,0,0,191,190,1,
        0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,
        0,0,0,195,172,1,0,0,0,195,186,1,0,0,0,196,54,1,0,0,0,197,201,7,4,
        0,0,198,200,7,5,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,
        0,0,201,202,1,0,0,0,202,56,1,0,0,0,203,201,1,0,0,0,204,206,7,6,0,
        0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,
        0,208,209,1,0,0,0,209,210,6,28,0,0,210,58,1,0,0,0,13,0,69,92,103,
        164,169,174,180,186,193,195,201,207,1,6,0,0
    ]

class GramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EQUAL_SIGN = 1
    TYPE = 2
    VOID = 3
    SEMICOLON = 4
    OP_ADDITIVE = 5
    OP_MULTIPLICATIVE = 6
    OP_INPLACE = 7
    OP_COMPARATIVE = 8
    IF = 9
    ELSE = 10
    DO = 11
    WHILE = 12
    RETURN = 13
    OPENPAREN = 14
    CLOSEPAREN = 15
    OPENSQUARE = 16
    CLOSESQUARE = 17
    OPENCURLY = 18
    CLOSECURLY = 19
    COMMA = 20
    ECOMMERCIAL = 21
    PERCENTAGE = 22
    GARBAGEPOINTER = 23
    CONST = 24
    PRINT_TOKEN = 25
    INT = 26
    FLOAT = 27
    ID = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'void'", "';'", "'if'", "'else'", "'do'", "'while'", 
            "'return'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", 
            "'&'", "'%'", "'_gp'", "'const'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "EQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", "OP_ADDITIVE", "OP_MULTIPLICATIVE", 
            "OP_INPLACE", "OP_COMPARATIVE", "IF", "ELSE", "DO", "WHILE", 
            "RETURN", "OPENPAREN", "CLOSEPAREN", "OPENSQUARE", "CLOSESQUARE", 
            "OPENCURLY", "CLOSECURLY", "COMMA", "ECOMMERCIAL", "PERCENTAGE", 
            "GARBAGEPOINTER", "CONST", "PRINT_TOKEN", "INT", "FLOAT", "ID", 
            "WS" ]

    ruleNames = [ "EQUAL_SIGN", "TYPE", "VOID", "SEMICOLON", "OP_ADDITIVE", 
                  "OP_MULTIPLICATIVE", "OP_INPLACE", "OP_COMPARATIVE", "IF", 
                  "ELSE", "DO", "WHILE", "RETURN", "OPENPAREN", "CLOSEPAREN", 
                  "OPENSQUARE", "CLOSESQUARE", "OPENCURLY", "CLOSECURLY", 
                  "COMMA", "ECOMMERCIAL", "PERCENTAGE", "GARBAGEPOINTER", 
                  "CONST", "PRINT_TOKEN", "INT", "FLOAT", "ID", "WS" ]

    grammarFileName = "Gram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


